/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package document_finder_service.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import document_finder_service.model.DocumentInfo;
import document_finder_service.model.DocumentInfoModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the DocumentInfo service. Represents a row in the &quot;FOO_DocumentInfo&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link DocumentInfoModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DocumentInfoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DocumentInfoImpl
 * @see DocumentInfo
 * @see DocumentInfoModel
 * @generated
 */
@ProviderType
public class DocumentInfoModelImpl extends BaseModelImpl<DocumentInfo>
	implements DocumentInfoModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a document info model instance should use the {@link DocumentInfo} interface instead.
	 */
	public static final String TABLE_NAME = "FOO_DocumentInfo";
	public static final Object[][] TABLE_COLUMNS = {
			{ "DocID", Types.BIGINT },
			{ "DocName", Types.VARCHAR },
			{ "DocGen", Types.VARCHAR },
			{ "DocFee", Types.INTEGER },
			{ "DocSize", Types.VARCHAR },
			{ "DocPreUrl", Types.VARCHAR },
			{ "DocDownUrl", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("DocID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("DocName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DocGen", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DocFee", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("DocSize", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DocPreUrl", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DocDownUrl", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table FOO_DocumentInfo (DocID LONG not null primary key,DocName VARCHAR(75) null,DocGen VARCHAR(75) null,DocFee INTEGER,DocSize VARCHAR(75) null,DocPreUrl VARCHAR(75) null,DocDownUrl VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table FOO_DocumentInfo";
	public static final String ORDER_BY_JPQL = " ORDER BY documentInfo.DocID ASC";
	public static final String ORDER_BY_SQL = " ORDER BY FOO_DocumentInfo.DocID ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(document_finder_service.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.document_finder_service.model.DocumentInfo"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(document_finder_service.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.document_finder_service.model.DocumentInfo"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(document_finder_service.service.util.ServiceProps.get(
				"lock.expiration.time.document_finder_service.model.DocumentInfo"));

	public DocumentInfoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _DocID;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDocID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _DocID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DocumentInfo.class;
	}

	@Override
	public String getModelClassName() {
		return DocumentInfo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("DocID", getDocID());
		attributes.put("DocName", getDocName());
		attributes.put("DocGen", getDocGen());
		attributes.put("DocFee", getDocFee());
		attributes.put("DocSize", getDocSize());
		attributes.put("DocPreUrl", getDocPreUrl());
		attributes.put("DocDownUrl", getDocDownUrl());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long DocID = (Long)attributes.get("DocID");

		if (DocID != null) {
			setDocID(DocID);
		}

		String DocName = (String)attributes.get("DocName");

		if (DocName != null) {
			setDocName(DocName);
		}

		String DocGen = (String)attributes.get("DocGen");

		if (DocGen != null) {
			setDocGen(DocGen);
		}

		Integer DocFee = (Integer)attributes.get("DocFee");

		if (DocFee != null) {
			setDocFee(DocFee);
		}

		String DocSize = (String)attributes.get("DocSize");

		if (DocSize != null) {
			setDocSize(DocSize);
		}

		String DocPreUrl = (String)attributes.get("DocPreUrl");

		if (DocPreUrl != null) {
			setDocPreUrl(DocPreUrl);
		}

		String DocDownUrl = (String)attributes.get("DocDownUrl");

		if (DocDownUrl != null) {
			setDocDownUrl(DocDownUrl);
		}
	}

	@Override
	public long getDocID() {
		return _DocID;
	}

	@Override
	public void setDocID(long DocID) {
		_DocID = DocID;
	}

	@Override
	public String getDocName() {
		if (_DocName == null) {
			return StringPool.BLANK;
		}
		else {
			return _DocName;
		}
	}

	@Override
	public void setDocName(String DocName) {
		_DocName = DocName;
	}

	@Override
	public String getDocGen() {
		if (_DocGen == null) {
			return StringPool.BLANK;
		}
		else {
			return _DocGen;
		}
	}

	@Override
	public void setDocGen(String DocGen) {
		_DocGen = DocGen;
	}

	@Override
	public int getDocFee() {
		return _DocFee;
	}

	@Override
	public void setDocFee(int DocFee) {
		_DocFee = DocFee;
	}

	@Override
	public String getDocSize() {
		if (_DocSize == null) {
			return StringPool.BLANK;
		}
		else {
			return _DocSize;
		}
	}

	@Override
	public void setDocSize(String DocSize) {
		_DocSize = DocSize;
	}

	@Override
	public String getDocPreUrl() {
		if (_DocPreUrl == null) {
			return StringPool.BLANK;
		}
		else {
			return _DocPreUrl;
		}
	}

	@Override
	public void setDocPreUrl(String DocPreUrl) {
		_DocPreUrl = DocPreUrl;
	}

	@Override
	public String getDocDownUrl() {
		if (_DocDownUrl == null) {
			return StringPool.BLANK;
		}
		else {
			return _DocDownUrl;
		}
	}

	@Override
	public void setDocDownUrl(String DocDownUrl) {
		_DocDownUrl = DocDownUrl;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			DocumentInfo.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DocumentInfo toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (DocumentInfo)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DocumentInfoImpl documentInfoImpl = new DocumentInfoImpl();

		documentInfoImpl.setDocID(getDocID());
		documentInfoImpl.setDocName(getDocName());
		documentInfoImpl.setDocGen(getDocGen());
		documentInfoImpl.setDocFee(getDocFee());
		documentInfoImpl.setDocSize(getDocSize());
		documentInfoImpl.setDocPreUrl(getDocPreUrl());
		documentInfoImpl.setDocDownUrl(getDocDownUrl());

		documentInfoImpl.resetOriginalValues();

		return documentInfoImpl;
	}

	@Override
	public int compareTo(DocumentInfo documentInfo) {
		long primaryKey = documentInfo.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DocumentInfo)) {
			return false;
		}

		DocumentInfo documentInfo = (DocumentInfo)obj;

		long primaryKey = documentInfo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<DocumentInfo> toCacheModel() {
		DocumentInfoCacheModel documentInfoCacheModel = new DocumentInfoCacheModel();

		documentInfoCacheModel.DocID = getDocID();

		documentInfoCacheModel.DocName = getDocName();

		String DocName = documentInfoCacheModel.DocName;

		if ((DocName != null) && (DocName.length() == 0)) {
			documentInfoCacheModel.DocName = null;
		}

		documentInfoCacheModel.DocGen = getDocGen();

		String DocGen = documentInfoCacheModel.DocGen;

		if ((DocGen != null) && (DocGen.length() == 0)) {
			documentInfoCacheModel.DocGen = null;
		}

		documentInfoCacheModel.DocFee = getDocFee();

		documentInfoCacheModel.DocSize = getDocSize();

		String DocSize = documentInfoCacheModel.DocSize;

		if ((DocSize != null) && (DocSize.length() == 0)) {
			documentInfoCacheModel.DocSize = null;
		}

		documentInfoCacheModel.DocPreUrl = getDocPreUrl();

		String DocPreUrl = documentInfoCacheModel.DocPreUrl;

		if ((DocPreUrl != null) && (DocPreUrl.length() == 0)) {
			documentInfoCacheModel.DocPreUrl = null;
		}

		documentInfoCacheModel.DocDownUrl = getDocDownUrl();

		String DocDownUrl = documentInfoCacheModel.DocDownUrl;

		if ((DocDownUrl != null) && (DocDownUrl.length() == 0)) {
			documentInfoCacheModel.DocDownUrl = null;
		}

		return documentInfoCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{DocID=");
		sb.append(getDocID());
		sb.append(", DocName=");
		sb.append(getDocName());
		sb.append(", DocGen=");
		sb.append(getDocGen());
		sb.append(", DocFee=");
		sb.append(getDocFee());
		sb.append(", DocSize=");
		sb.append(getDocSize());
		sb.append(", DocPreUrl=");
		sb.append(getDocPreUrl());
		sb.append(", DocDownUrl=");
		sb.append(getDocDownUrl());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("document_finder_service.model.DocumentInfo");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>DocID</column-name><column-value><![CDATA[");
		sb.append(getDocID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>DocName</column-name><column-value><![CDATA[");
		sb.append(getDocName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>DocGen</column-name><column-value><![CDATA[");
		sb.append(getDocGen());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>DocFee</column-name><column-value><![CDATA[");
		sb.append(getDocFee());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>DocSize</column-name><column-value><![CDATA[");
		sb.append(getDocSize());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>DocPreUrl</column-name><column-value><![CDATA[");
		sb.append(getDocPreUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>DocDownUrl</column-name><column-value><![CDATA[");
		sb.append(getDocDownUrl());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = DocumentInfo.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			DocumentInfo.class
		};
	private long _DocID;
	private String _DocName;
	private String _DocGen;
	private int _DocFee;
	private String _DocSize;
	private String _DocPreUrl;
	private String _DocDownUrl;
	private DocumentInfo _escapedModel;
}