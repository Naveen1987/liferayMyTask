/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.employee.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.employee.model.Employeee;
import com.employee.model.EmployeeeModel;
import com.employee.model.EmployeeeSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Employeee service. Represents a row in the &quot;employee_naveen&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link EmployeeeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EmployeeeImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EmployeeeImpl
 * @see Employeee
 * @see EmployeeeModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class EmployeeeModelImpl extends BaseModelImpl<Employeee>
	implements EmployeeeModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a employeee model instance should use the {@link Employeee} interface instead.
	 */
	public static final String TABLE_NAME = "employee_naveen";
	public static final Object[][] TABLE_COLUMNS = {
			{ "eid", Types.BIGINT },
			{ "ename", Types.VARCHAR },
			{ "esal", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("eid", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ename", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("esal", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table employee_naveen (eid LONG not null primary key,ename VARCHAR(75) null,esal LONG)";
	public static final String TABLE_SQL_DROP = "drop table employee_naveen";
	public static final String ORDER_BY_JPQL = " ORDER BY employeee.eid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY employee_naveen.eid ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.employee.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.employee.model.Employeee"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.employee.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.employee.model.Employeee"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Employeee toModel(EmployeeeSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Employeee model = new EmployeeeImpl();

		model.setEid(soapModel.getEid());
		model.setEname(soapModel.getEname());
		model.setEsal(soapModel.getEsal());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Employeee> toModels(EmployeeeSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Employeee> models = new ArrayList<Employeee>(soapModels.length);

		for (EmployeeeSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.employee.service.util.ServiceProps.get(
				"lock.expiration.time.com.employee.model.Employeee"));

	public EmployeeeModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _eid;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _eid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Employeee.class;
	}

	@Override
	public String getModelClassName() {
		return Employeee.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("eid", getEid());
		attributes.put("ename", getEname());
		attributes.put("esal", getEsal());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long eid = (Long)attributes.get("eid");

		if (eid != null) {
			setEid(eid);
		}

		String ename = (String)attributes.get("ename");

		if (ename != null) {
			setEname(ename);
		}

		Long esal = (Long)attributes.get("esal");

		if (esal != null) {
			setEsal(esal);
		}
	}

	@JSON
	@Override
	public long getEid() {
		return _eid;
	}

	@Override
	public void setEid(long eid) {
		_eid = eid;
	}

	@JSON
	@Override
	public String getEname() {
		if (_ename == null) {
			return StringPool.BLANK;
		}
		else {
			return _ename;
		}
	}

	@Override
	public void setEname(String ename) {
		_ename = ename;
	}

	@JSON
	@Override
	public long getEsal() {
		return _esal;
	}

	@Override
	public void setEsal(long esal) {
		_esal = esal;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Employeee.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Employeee toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Employeee)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EmployeeeImpl employeeeImpl = new EmployeeeImpl();

		employeeeImpl.setEid(getEid());
		employeeeImpl.setEname(getEname());
		employeeeImpl.setEsal(getEsal());

		employeeeImpl.resetOriginalValues();

		return employeeeImpl;
	}

	@Override
	public int compareTo(Employeee employeee) {
		long primaryKey = employeee.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Employeee)) {
			return false;
		}

		Employeee employeee = (Employeee)obj;

		long primaryKey = employeee.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Employeee> toCacheModel() {
		EmployeeeCacheModel employeeeCacheModel = new EmployeeeCacheModel();

		employeeeCacheModel.eid = getEid();

		employeeeCacheModel.ename = getEname();

		String ename = employeeeCacheModel.ename;

		if ((ename != null) && (ename.length() == 0)) {
			employeeeCacheModel.ename = null;
		}

		employeeeCacheModel.esal = getEsal();

		return employeeeCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{eid=");
		sb.append(getEid());
		sb.append(", ename=");
		sb.append(getEname());
		sb.append(", esal=");
		sb.append(getEsal());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.employee.model.Employeee");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>eid</column-name><column-value><![CDATA[");
		sb.append(getEid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ename</column-name><column-value><![CDATA[");
		sb.append(getEname());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>esal</column-name><column-value><![CDATA[");
		sb.append(getEsal());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Employeee.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Employeee.class
		};
	private long _eid;
	private String _ename;
	private long _esal;
	private Employeee _escapedModel;
}